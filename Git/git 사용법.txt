/////////////////////////Git  깃 시작하기 ///////////////////////////////

파일을 수정할때마다 소위 말하는 버전을 바꾸는 기록을 남긴다. 
버전 관리의 핵심이고, 버전관리 소스를 어딘가에 백업을 해놔야한다. 
컴퓨터 안에 하는게 아니라 원격에 있는 원격저장소에 백업을 해놓는다. 

원격 저장소를 기준으로 여러 사람이 올려놓고 공유할 수 있다.


커맨드 라인 인터페이스(CLI)
도스에서 버전잉도하고, 커맨드방식으로 한다. 기본적인 리눅스 명령어를 알아야하며, 
개발자 대부분은 커맨드 라인 인터페이스로 깃을 사용한다.

https://git-scm.com/ 사이트 들어가서 우측버전을 클릭 다운을하고,
실행을하면 -> 두번 넘어가면 모두 클릭후 설치 - 여기서 Git Bash Here 이체크라인이 
명령창이다 Newt 한번 들어가면 use Visual Studio Code as Git's default editor을 체크라인에
편집기를 설정후 Nest하고, 첫번째 클릭후 Nest, 두번째 Git from 클릭 -> 
그럼 두가지가 나오고 첫번쨰는 암호화된 원격을 주고 받고자하면 위에꺼 Use the OpenSSL library
위에꺼 선택후 -> Chekout Windows-style클릭 -> 터미널을 어떤걸 쓸래? user windows'클릭 ->
Default-> Git Credential Manager Core-> Enable file -> Enable experimental 체크 풀고 Install -> 끝 ~  
도스창 -> git version , git --version

https://desktop.github.com/ 이것도 다운받으면 좋다.


git 시작 메뉴에 git 폴더에 git Bash창을 띄우고 여기부터 리눅스 명령어를 사용해야한다.

깃을 사용하면, 깃 환경설정하기를 들어야가야한다. 누군가 A.JAVA를 생성할때 버전잉을하고 
저장소에 저장하기 위해서 버전잉할 폴더명이 있어야한다. 

1. app밑에 git_repository 폴더를 만들고 -> 환경설정 들어가야한다. 들어가는 방법으로 
2가지를 설정해야한다. 

2. git config 명령어를 사용하고 , 두가지를 수행한다. user.name"이름", user.email"메일 주소"
두가지를 해야지 이정보를 버전이 늘어날때마다 누가 이버전을 만들었냐 설정하는것이다.


*Linux Command List For git Bash * 명령어
1. df -h  현재 구성 파일시스템 목록을 표기
2. cd /c/app/git_repository 우리가 정한 저장소 폴더로 //이동 여기까지 이동 후 
3. clear 를 써서 화면을 다 지우고
4. git config --list  깃에 대한 모든설정값이 나온다.  키, 벨류 즉 항복값이 나온다 //키 = 값
5. git config --list --global 항목중 "전역설정항목" 만 보여주라는것이고
6. git config --list --loacal 항목중 "지역설정항목" 만 보여주라는것이고  (현재만적용된다)
7. git config --list --system 항목중 "OS설정항목만" 만 보여주는것 

다해보고
git config --global user.name ""  이름을 문자열로 넣어줘라 ~ (설정값을 추가하는것이다)
전역 설정으로 user.name항목을 추가하고 (값: KangSungWoo)으로 추가함
git config --global user.email "whwlrwkdal@gmail.com" 값으로 추가함 
확인하는 방법 git config --listgit

   내가 원하는 목록만 나오는 방법
앞에서 내가 썻던 출력 내용중 user단어를 잡아라 ~
git config --list --global | grep user  전역설정목록에서 "user"란 단어를 포함하고있는
행을 추출( grep 명령을 통해) " | "명령어는, 왼쪽 명령의 출력결과를, 오른쪽 명령어의 입력으로
주라!!라는 의미 

지금까지 버전잉을 남길 이름과, 이메일,설정했다. 환경설정을 완료하고, 
아까 설정했던 저장소를 설정하는데 일반폴더안에 버전잉을 할 수 있는 폴더로 탈바꿈을 해야한다.
깃의 종류에는 1. 지역저장소가 있고 영어로 Local repository하고 (이곳은 우리PC내부저장소)
           2.원격저장소 Remote Repositroy가 있다.   (이곳은 로컬 중앙저장소)
버전관리를하다가 필요에의해 백업을 해야하는데 백업을 원격저장소에 한다. 
원격저장소에서도 버전관리를 한다. 원격저장소와, 지역저장소 양쪽을 서로간 동기화시켜야한다.

팀단위로 개발할때 , 로컬저장소가 아니니 원격 저장소에 올려놓은 프로젝트를 모든팀원이 공유하고,
개발을 수행하게 된다.
C:/app/git_repository로 설정해놨는데 이 폴더는 Top level folder이다. 저기안에 여러
저장소가 생겨날것이다.

   새로운 저장소를 만들어보자 
pwd 치면 현재 내가있는 장소를 보여줌 Print Working Directory 명령어이다.
mkdir hello-git   을쳐서 디렉터리를 생성 ~
ll  현재 내가있는 폴더 안에 모든 파일과 디렉터리를 표시
ll or $ ll -a 현재 내가있는 폴더 안에 숨겨져있는 모든것이 다나온다
(1)방법 : git init ./hello-git/ 현재폴더 아래에 있는 hello-git 이라고 하는 폴더를 git
         지역 저장소로 만들어라!!
(2)방법 : cd hello-git hello-git 폴더로 이동한 다음에,  git init or git init .
         바로 현재폴더에 만들어진다
들어가서 ll치면 안나옴 ll -a 치면  .git 이런식으로 나옴, .은 히든이고 
수정한 내용을 저장하면 버전이라고 한다. 버전을 저장하는 .git폴더에 저장된다. 일반폴더에서
지역저장소 폴더로 바뀌게된다. 
지역폴더를 일반 폴더를 바꾸는 방법은 : .git를 삭제하면된다 
rm -rf .git 하면 삭제가된다. 현재의 폴더아래에 있는 .git 이라는 폴더를 강제로라도 삭제하라
(.git 폴더 아래에 또 다른 폴더까지 포함)


15. $touch hello.txt	(현재위치에 크기가 0인 txt파일 만들기)


16. $git status		(현재의 지역저장소의 상태를 보여준다.)
	-untracked files도 보여준다.


17. $git add hello.txt    $git add .	(앞에는 한개만, 뒤에는 모든것들다)
	(작업트리에서 발생한 새로운 변경 내역을 스테이지에 올려 놓는 작업(스테이징))


18. $git rm --cached hello.txt		
	(스테이지에 올라간 파일을 다시 언 스테이지 시킨다.)
	단 이 명령은, Untracked file인 경우에만 가능.
	*Untracked files - 단 한번도 버전을 기록하지 않은 파일
	*tracked files - 단 한번이라도 버전을 기록해서, 계속적으로 변경을 
			추적할 수 있는 상태의 파일

19. $git commit -m "Commit Message"	
	(-m은 커밋 메세지를 추가로 넣어준다. <> 안에 문자열, 한글자면 <> 생략가능>
	(스테이지 영역에 올라와있는 모든 변경된 파일들을 지역 저장소의 버전 데이터베이스에
	영구적으로 저장함. 결국 버전 데이터베이스에 새로운 버전이 생성된다)
		$git status를 이후에 수행하면, 현재의 작업 트리는 아주 깨끗하다 라는 메세지가 나옴.


20. $git log
	버전 데이터베이스에 기록된(committed) 모든 버전 목록을 상세하게 보여줌.
	$git log --oneline	-1개의 행으로 간략하게 보여준다.
	$git log --source	-처음에 작업한 branch를 보여준다.
	$git log --branches	-마지막에 작업한 branch를 보여준다.
	$git log --parents	-어떤 파일을 부모로 삼았는지 보여준다.
	$git log --stat		-Commit된 파일의 정보
	$git log --graph


21. $echo hello
	지정한 값을 그대로 돌려주는 명령어


22. $echo hello > hello.txt		(>는 redirect)
	- hello라는것을 echo를 사용해서 돌려주는데, 이것을 >(redirect)를 사용하여,
	hello.txt에 넣어준다.


23. 
	$cat hello.txt    
	$head -100 hello.txt     	-시작부터 100라인 보여줘라	(라인수 지정 안해도 됌)
	$tail -100 hello.txt    	-끝부터 100라인을 보여줘라	(라인수 지정 안해도 됌)
	$more hello.txt


24. $git restore hello.txt
	변경 내역을 취소한다.(add되기 전의 파일)


25. $echo hello, world >> hello.txt
	-   > 기호를 한개를 적으면 덮어쓰기, 두개를 넣으면 append


26. $git restore --staged hello.txt
	- tracked파일을 언스테이징 하기 위한 명령어


27. $git commit -a -m Commit5		(-a는 add -m은 메세지넣겠다)
    $git commit -am "Commit Message"	(-a와 -m을 합쳐서 사용 가능하다)
	-tracked 파일에 한해서, add와 commit을 동시에 수행한다.


28. $git push -v origin master		-푸쉬한다. 버젼을. 오리진은 마스터로.



29. $nano hello.txt
	윈도우 노트패드같은 역할
	이 편집기는 리눅스/유닉스 운영체제의 아주 "초보자들"이 사용하는 편집기.
	따라서 아래의 두가지 중 한가지의 편집기를 능숙하게 사용해야된다.
	vi hello.txt  또는 vim hello.txt
	emacs hello.txt


30. $git diff hello.txt		-변경 내역을 보여준다.
	git diff hello.txt --help	diff관련 도움말 페이지


31. $git log --oneline --source --parents --branches --graph --stat


32. $rm hello4.txt
	지정된 파일을 삭제할 때 사용,
	-f 옵션을 지정하면, 강제로라도 삭제하라는 의미(force)


33. $git checkout hello3.txt
	지정된 파일의 변경내역(단, Tracked file에 대해서만)을 이전상태로 되돌리는
	기능을 수행하지만, !! 원래 이 checkout 명령어는 branch관리명령어이기에
	잘못 사용하면, branch가 망가진다.
	-->	변경내역을 되돌리는 명령어로 restore를 쓸것!



34. $git restore hello3.txt
	unstage 명령


35. $git reset HEAD^
	현재 가장 최신커밋버전을 삭제하는 명령
	명령수행의 결과:
		최신커밋버전삭제
		자동으로 unstaged
		작업트리의 변경사항만 남게된다


36. $git reset --option 커밋아이디
	--option의 종류
		--hard	-> 	명령수행결과를 복구 불가
				작업트리의 변경전으로 회귀
				부모커밋 로그들은 모두 삭제

		--soft	->	최신커밋버전 이전 상태로 작업트리를 되돌린다.
				최신커밋버전은 삭제	

		--mixed	->	위의 35번 명령의 기본욥션으로
				옵션 생략시 default값.

37. $wc -l hello3.txt
	지정된 파일의 행의 개수를 출력


38. $git commit --amend
	git log의 바로 전 commitgit  message를 수정

39. $git reset --hard <hash code>
	head가 hash code가 된다. 지워진건 복구 불가

	$git reset --soft <hash code>
	head가 hash code가 된다. 지워진거 복구 가능
	

40. $git revert <hash code>
	지정된 커밋 해쉬까지 취소하라. 하지만 CONFLICT와 더불어 ERROR가 발생하면
	지금수행한 revert작업은 끝난게 아니라 conflict가 잔존하게 된다.


41. $git revert


42. git branch
	현재시점 생성되어있는 브랜치 확인

43. git branch apple
	apple이라는 브랜치를 생성

46. git switch apple
	apple이라는 브랜치로 이동

47. git switch --creat citrix
	citrix라는 브랜치를 생성하고, 그 브랜치로 이동하라.

48. git checkout -b ttt
	ttt라는 브랜치를 생성하고, 그 ttt브랜치로 이동

49. git log --oneline master..apple
	마스터에는 없고, apple브랜치가 갖고있는 로그를 보여준다.

50. git merge apple
	브랜치가 마스터인 상태에서, 명령어를 실행하면, 애플 브랜치를 마스터쪽으로 합친다.

	현재의 브랜치가 기준 브랜치가된다(master)
	다른 브랜치가 병합대상 브랜치가 된다(apple)

51. git merge --abort
	두 브랜치간의 병합시 충돌이 발생되어서, 자동병합이 실패하는 경우엔, 2가지 옵션 가능
	1. 충돌을 fix시키고, commit하여, 현재 보류중인 병합을 완성
	2. 위의 명령어로 현재 충돌로 인해 보류중인 병합을 아예 중단

52. git branch -d citrix ms ....
	citrix와 ms라는 이름을 가진 브랜치를 삭제한다.

53. git branch -D google
	그 브랜치가 만든 독자적인 파일이 있으며, 
	아직 master 브랜치로 병합되지 않은 브랜치를 삭제할때 사용.
	또한 그 파일도 삭제가 된다.

54. git stash
	현재 브랜치의 현재 작업트리에서 발생한 변경내역들을 모두
	감춘다. git에는 stash라고 하는 스택이 존재한다.


55. git stash list
	현재까지 push된, git stash 스택의 목록을 보여준다.

56. git stash save -m "Stash Message"
	stash message를 넣어준다.


57. git stash pop
	안에 저장된 stash list중에서 index number가 0인 맨 위에것(최근것)을 빼온다.
	list에서 삭제, status에 남는다.

58. git stash drop
	안에 저장된 stash list중에서 index number가 0인 맨 위에것(최근것)을 삭제한다.
	list에서 삭제, status에서 삭제

59. git stash apply
	안에 저장된 stash list중에서 index number가 0인 맨 위에것을 가져오지만, 
	list에도 남고, status에도 남는다.



